// Generated by CoffeeScript 1.6.3
(function() {
  var drawFaceNormal, drawLine, loadMesh, partLoaded;

  loadMesh = function(filename, callback) {
    var ext, loader;
    if (filename == null) {
      return callback(filename, new THREE.Object3D());
    } else {
      ext = filename.match(/\.[^\.]+$/)[0];
      if (ext === ".dae") {
        loader = new THREE.ColladaLoader();
        return loader.load(filename, function(collada) {
          var node;
          node = collada.scene;
          return callback(filename, node);
        });
      } else if (ext === ".stl") {
        loader = new THREE.STLLoader();
        loader.addEventListener('load', function(event) {
          var geometry, mat, mesh, node;
          geometry = event.content;
          mat = new THREE.MeshLambertMaterial({
            color: 0xCCCCCC
          });
          mesh = new THREE.Mesh(geometry, mat);
          node = new THREE.Object3D();
          node.add(mesh);
          return callback(filename, node);
        });
        loader.addEventListener('progress', onProgress);
        return loader.load(filename);
      }
    }
  };

  partLoaded = function(filename, node) {
    var face, _i, _len, _ref;
    window.head = node;
    window.geo = head.children[0].geometry;
    c.scene.add(node);
    _ref = geo.faces;
    for (_i = 0, _len = _ref.length; _i < _len; _i++) {
      face = _ref[_i];
      drawFaceNormal(geo, face);
    }
    c.camera.near = 0;
    return c.render();
  };

  drawLine = function(base, normal, length) {
    var line, lineGeometry, tip;
    lineGeometry = new THREE.Geometry();
    lineGeometry.vertices.push(base);
    tip = normal.copy();
    tip.scale(length);
    tip.add(base);
    lineGeometry.vertices.push(tip);
    line = new THREE.Line(lineGeometry, new THREE.LineBasicMaterial({
      color: 0xFF0000
    }));
    line.matrixAutoUpdate = false;
    return line;
  };

  drawFaceNormal = function(geo, face) {
    var base, line, va, vb, vc;
    va = geo.vertices[face.a];
    vb = geo.vertices[face.b];
    vc = geo.vertices[face.c];
    base = new THREE.Vector3((va.x + vb.x + vc.x) / 3, (va.y + vb.y + vc.y) / 3, (va.z + vb.z + vc.z) / 3);
    line = drawLine(base, face.normal, 0.01);
    return c.scene.add(line);
  };

  $(document).ready(function() {
    var filename;
    window.c = new WebGLRobots.DefaultCanvas('#hubo_container');
    filename = '/data/hubo-urdf/meshes/Body_Head_col.dae';
    return loadMesh(filename, partLoaded);
  });

}).call(this);
