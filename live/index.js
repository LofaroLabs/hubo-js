// Generated by CoffeeScript 1.7.1
var FT_Sensor, LIVE, adaptCanvasSize, addStats, extractLimits, lerp;

LIVE = {};

LIVE.use_socket = true;

LIVE.connectionEstablished = $.Deferred();

LIVE.connectToServer = function() {
  var connectTimeoutId, serial_stateRef, socket;
  if (LIVE.use_socket) {
    console.log('Trying to connect to server...');
    LIVE.socket = io.connect('hubovision.us:6060', {
      'force new connection': true,
      timeout: 3000
    });
    socket = LIVE.socket;
    connectTimeoutId = setTimeout(LIVE.connectToServer, 5000);
    socket.on('connect', function() {
      console.log('connect');
      window.clearTimeout(connectTimeoutId);
      return LIVE.connectionEstablished.resolve();
    });
    socket.on('connecting', function() {
      return console.log('connecting');
    });
    socket.on('disconnect', function() {
      return console.log('disconnect');
    });
    socket.on('connect_failed', function() {
      return console.log('connect_failed');
    });
    socket.on('reconnect', function() {
      return console.log('reconnect');
    });
    socket.on('reconnecting', function() {
      return console.log('reconnecting');
    });
    return socket.on('reconnect_failed', function() {
      return console.log('reconnect_failed');
    });
  } else {
    serial_stateRef = new Firebase('http://hubo-firebase.firebaseIO.com/serial_state');
    return serial_stateRef.on('value', function(snapshot) {
      var serial_state;
      serial_state = snapshot.val();
      flashLED();
      return updateModel(serial_state);
    });
  }
};

(function() {
  var ledTimeoutId;
  ledTimeoutId = null;
  return LIVE.flashLED = function() {
    window.clearTimeout(ledTimeoutId);
    $('#led').show();
    return ledTimeoutId = setTimeout(function() {
      return $('#led').hide();
    }, 200);
  };
})();

lerp = function(min, max, zero, t) {
  if (t > max) {
    t = max;
  }
  if (t < min) {
    t = min;
  }
  if (t < zero) {
    return Math.min((zero - t) / (zero - min), 1);
  } else {
    return Math.min((t - zero) / (max - zero), 1);
  }
};

FT_Sensor = (function() {
  var computeColor;

  function FT_Sensor(name) {
    this.name = name;
    this.m_x_obj = new THREE.ArrowHelper(new THREE.Vector3(1, 0, 0), new THREE.Vector3(0, 0, 0), 0.15, 0xFF0000);
    this.m_y_obj = new THREE.ArrowHelper(new THREE.Vector3(0, 1, 0), new THREE.Vector3(0, 0, 0), 0.15, 0x00FF00);
    this.f_z_obj = new THREE.ArrowHelper(new THREE.Vector3(0, 0, -1), new THREE.Vector3(0, 0, 0), 0.15, 0x0000FF);
    this.axis = new THREE.Object3D();
    this.axis.add(this.m_x_obj);
    this.axis.add(this.m_y_obj);
    this.axis.add(this.f_z_obj);
  }

  FT_Sensor.prototype.updateColor = function(o) {
    var fz_gradient, mx_gradient, my_gradient;
    mx_gradient = lerp(o.mx_min, o.mx_max, 0, this.m_x);
    my_gradient = lerp(o.my_min, o.my_max, 0, this.m_y);
    fz_gradient = lerp(o.fz_min, o.fz_max, 0, this.f_z);
    this.axis.children[0].setColor(computeColor(mx_gradient).getHex());
    this.axis.children[1].setColor(computeColor(my_gradient).getHex());
    return this.axis.children[2].setColor(computeColor(fz_gradient).getHex());
  };

  computeColor = function(t) {
    var temp, y;
    temp = new THREE.Color();
    y = $('#color_limits .y_threshold').val();
    if (t > y) {
      temp.setRGB(1, 1 - lerp(y, 1, 0, t), 0);
    } else {
      temp.setRGB(lerp(0, y, 0, t), 1, 0);
    }
    return temp;
  };

  return FT_Sensor;

})();

extractLimits = function(el) {
  var o;
  o = {};
  o.mx_min = $(el).find(".m_x_min").val();
  o.mx_max = $(el).find(".m_x_max").val();
  o.my_min = $(el).find(".m_y_min").val();
  o.my_max = $(el).find(".m_y_max").val();
  o.fz_min = $(el).find(".f_z_min").val();
  o.fz_max = $(el).find(".f_z_max").val();
  return o;
};

adaptCanvasSize = function(c) {
  var height, width;
  if (document.webkitIsFullScreen) {
    width = $(window).width();
    height = $(window).height();
  } else {
    width = Math.min($(window).width(), $(window).height());
    height = width;
  }
  $('#hubo_container').width(width);
  $('#hubo_container').height(height);
  return c.resize(width, height);
};

addStats = function() {
  var stats;
  stats = new Stats();
  stats.setMode(0);
  $('#hubo_container').append(stats.domElement);
  stats.domElement.style.position = 'relative';
  stats.domElement.style.cssFloat = 'right';
  return LIVE.stats = stats;
};

$(document).ready(function() {
  var c, callback, floorG, floorM, hubo, progress, texture;
  LIVE.connectToServer();
  addStats();
  c = new Hubo.DefaultCanvas("#hubo_container");
  adaptCanvasSize(c);
  $(window).on('orientationchange resize', function() {
    return setTimeout(adaptCanvasSize(c), 500);
  });
  texture = THREE.ImageUtils.loadTexture('checkerboard.png', THREE.Linear);
  texture.wrapS = THREE.RepeatWrapping;
  texture.wrapT = THREE.RepeatWrapping;
  texture.repeat.x = 20;
  texture.repeat.y = 20;
  floorG = new THREE.PlaneGeometry(20, 20);
  floorM = new THREE.MeshBasicMaterial({
    map: texture
  });
  LIVE.floor = new THREE.Mesh(floorG, floorM);
  LIVE.floor.overdraw = true;
  c.scene.add(LIVE.floor);
  hubo = new Hubo("hubo2", callback = function() {
    var updateModel;
    c.add(hubo);
    hubo.autorender = false;
    $("#load").hide();
    if (hubo.ft == null) {
      hubo.ft = {};
    }
    hubo.ft.HUBO_FT_R_HAND = new FT_Sensor();
    hubo.ft.HUBO_FT_L_HAND = new FT_Sensor();
    hubo.ft.HUBO_FT_R_FOOT = new FT_Sensor();
    hubo.ft.HUBO_FT_L_FOOT = new FT_Sensor();
    hubo.links.Body_RWP.add(hubo.ft.HUBO_FT_R_HAND.axis);
    hubo.links.Body_LWP.add(hubo.ft.HUBO_FT_L_HAND.axis);
    hubo.links.Body_RAR.add(hubo.ft.HUBO_FT_R_FOOT.axis);
    hubo.links.Body_LAR.add(hubo.ft.HUBO_FT_L_FOOT.axis);
    hubo.ft.HUBO_FT_R_HAND.axis.position = new THREE.Vector3(0, 0, -0.1);
    hubo.ft.HUBO_FT_L_HAND.axis.position = new THREE.Vector3(0, 0, -0.1);
    hubo.ft.HUBO_FT_R_FOOT.axis.position = new THREE.Vector3(-0.05, 0, -0.11);
    hubo.ft.HUBO_FT_L_FOOT.axis.position = new THREE.Vector3(-0.05, 0, -0.11);
    c.render();
    LIVE.floor.position.z = hubo.ft.HUBO_FT_L_FOOT.axis.localToWorld(new THREE.Vector3(0, 0, -0.01)).z;
    updateModel = function(serial_state) {
      var foot_limits, hand_limits, jointType, showCurrent, state;
      if ((serial_state == null) || serial_state === "") {
        return;
      }
      state = JSON.parse(serial_state);
      jointType = $('input[name="angle-source"]:checked').val();
      showCurrent = $('input[name="current-source"]:checked').val();
      hand_limits = extractLimits($('#ft_hand_limits'));
      foot_limits = extractLimits($('#ft_foot_limits'));
      hubo.ft["HUBO_FT_R_HAND"].m_x = state.ft[0];
      hubo.ft["HUBO_FT_R_HAND"].m_y = state.ft[1];
      hubo.ft["HUBO_FT_R_HAND"].f_z = state.ft[2];
      hubo.ft["HUBO_FT_R_HAND"].updateColor(hand_limits);
      hubo.ft["HUBO_FT_L_HAND"].m_x = state.ft[3];
      hubo.ft["HUBO_FT_L_HAND"].m_y = state.ft[4];
      hubo.ft["HUBO_FT_L_HAND"].f_z = state.ft[5];
      hubo.ft["HUBO_FT_L_HAND"].updateColor(hand_limits);
      hubo.ft["HUBO_FT_R_FOOT"].m_x = state.ft[6];
      hubo.ft["HUBO_FT_R_FOOT"].m_y = state.ft[7];
      hubo.ft["HUBO_FT_R_FOOT"].f_z = state.ft[8];
      hubo.ft["HUBO_FT_R_FOOT"].updateColor(foot_limits);
      hubo.ft["HUBO_FT_L_FOOT"].m_x = state.ft[9];
      hubo.ft["HUBO_FT_L_FOOT"].m_y = state.ft[10];
      hubo.ft["HUBO_FT_L_FOOT"].f_z = state.ft[11];
      hubo.ft["HUBO_FT_L_FOOT"].updateColor(foot_limits);
      hubo.links.Body_Torso.rotation.x = state.imu[2].a_x;
      hubo.links.Body_Torso.rotation.y = state.imu[2].a_y;
      hubo.links.Body_Torso.rotation.z = state.imu[2].a_z;
      hubo.motors["WST"].value = state[jointType][0];
      hubo.motors["NKY"].value = state[jointType][1];
      hubo.motors["LSP"].value = state[jointType][4];
      hubo.motors["LSR"].value = state[jointType][5];
      hubo.motors["LSY"].value = state[jointType][6];
      hubo.motors["LEB"].value = state[jointType][7];
      hubo.motors["LWY"].value = state[jointType][8];
      hubo.motors["LWP"].value = state[jointType][10];
      hubo.motors["RSP"].value = state[jointType][11];
      hubo.motors["RSR"].value = state[jointType][12];
      hubo.motors["RSY"].value = state[jointType][13];
      hubo.motors["REB"].value = state[jointType][14];
      hubo.motors["RWY"].value = state[jointType][15];
      hubo.motors["RWP"].value = state[jointType][17];
      hubo.motors["LHY"].value = state[jointType][19];
      hubo.motors["LHR"].value = state[jointType][20];
      hubo.motors["LHP"].value = state[jointType][21];
      hubo.motors["LKN"].value = state[jointType][22];
      hubo.motors["LAP"].value = state[jointType][23];
      hubo.motors["LAR"].value = state[jointType][24];
      hubo.motors["RHY"].value = state[jointType][26];
      hubo.motors["RHR"].value = state[jointType][27];
      hubo.motors["RHP"].value = state[jointType][28];
      hubo.motors["RKN"].value = state[jointType][29];
      hubo.motors["RAP"].value = state[jointType][30];
      hubo.motors["RAR"].value = state[jointType][31];
      hubo.motors["RF1"].value = state[jointType][32];
      hubo.motors["RF2"].value = state[jointType][33];
      hubo.motors["RF3"].value = state[jointType][34];
      hubo.motors["RF4"].value = state[jointType][35];
      hubo.motors["RF5"].value = state[jointType][36];
      hubo.motors["LF1"].value = state[jointType][37];
      hubo.motors["LF2"].value = state[jointType][38];
      hubo.motors["LF3"].value = state[jointType][39];
      hubo.motors["LF4"].value = state[jointType][40];
      hubo.motors["LF5"].value = state[jointType][41];
      if (showCurrent === 'on') {
        hubo.joints["WST"].child.color.setRGB(0.866667 + 100 * state.cur[0] * state.cur[0], 0.866667 + 50 * state.cur[0] * state.cur[0], 0.866667);
        hubo.joints["NKY"].child.color.setRGB(0.866667 + 100 * state.cur[1] * state.cur[1], 0.866667 + 50 * state.cur[1] * state.cur[1], 0.866667);
        hubo.joints["LSP"].child.color.setRGB(0.866667 + 100 * state.cur[4] * state.cur[4], 0.866667 + 50 * state.cur[4] * state.cur[4], 0.866667);
        hubo.joints["LSR"].child.color.setRGB(0.866667 + 100 * state.cur[5] * state.cur[5], 0.866667 + 50 * state.cur[5] * state.cur[5], 0.866667);
        hubo.joints["LSY"].child.color.setRGB(0.866667 + 100 * state.cur[6] * state.cur[6], 0.866667 + 50 * state.cur[6] * state.cur[6], 0.866667);
        hubo.joints["LEB"].child.color.setRGB(0.866667 + 100 * state.cur[7] * state.cur[7], 0.866667 + 50 * state.cur[7] * state.cur[7], 0.866667);
        hubo.joints["LWY"].child.color.setRGB(0.866667 + 100 * state.cur[8] * state.cur[8], 0.866667 + 50 * state.cur[8] * state.cur[8], 0.866667);
        hubo.joints["LWP"].child.color.setRGB(0.866667 + 100 * state.cur[10] * state.cur[10], 0.866667 + 50 * state.cur[10] * state.cur[10], 0.866667);
        hubo.joints["RSP"].child.color.setRGB(0.866667 + 100 * state.cur[11] * state.cur[11], 0.866667 + 50 * state.cur[11] * state.cur[11], 0.866667);
        hubo.joints["RSR"].child.color.setRGB(0.866667 + 100 * state.cur[12] * state.cur[12], 0.866667 + 50 * state.cur[12] * state.cur[12], 0.866667);
        hubo.joints["RSY"].child.color.setRGB(0.866667 + 100 * state.cur[13] * state.cur[13], 0.866667 + 50 * state.cur[13] * state.cur[13], 0.866667);
        hubo.joints["REB"].child.color.setRGB(0.866667 + 100 * state.cur[14] * state.cur[14], 0.866667 + 50 * state.cur[14] * state.cur[14], 0.866667);
        hubo.joints["RWY"].child.color.setRGB(0.866667 + 100 * state.cur[15] * state.cur[15], 0.866667 + 50 * state.cur[15] * state.cur[15], 0.866667);
        hubo.joints["RWP"].child.color.setRGB(0.866667 + 100 * state.cur[17] * state.cur[17], 0.866667 + 50 * state.cur[17] * state.cur[17], 0.866667);
        hubo.joints["LHY"].child.color.setRGB(0.866667 + 100 * state.cur[19] * state.cur[19], 0.866667 + 50 * state.cur[19] * state.cur[19], 0.866667);
        hubo.joints["LHR"].child.color.setRGB(0.866667 + 100 * state.cur[20] * state.cur[20], 0.866667 + 50 * state.cur[20] * state.cur[20], 0.866667);
        hubo.joints["LHP"].child.color.setRGB(0.866667 + 100 * state.cur[21] * state.cur[21], 0.866667 + 50 * state.cur[21] * state.cur[21], 0.866667);
        hubo.joints["LKN"].child.color.setRGB(0.866667 + 100 * state.cur[22] * state.cur[22], 0.866667 + 50 * state.cur[22] * state.cur[22], 0.866667);
        hubo.joints["LAP"].child.color.setRGB(0.866667 + 100 * state.cur[23] * state.cur[23], 0.866667 + 50 * state.cur[23] * state.cur[23], 0.866667);
        hubo.joints["LAR"].child.color.setRGB(0.866667 + 100 * state.cur[24] * state.cur[24], 0.866667 + 50 * state.cur[24] * state.cur[24], 0.866667);
        hubo.joints["RHY"].child.color.setRGB(0.866667 + 100 * state.cur[26] * state.cur[26], 0.866667 + 50 * state.cur[26] * state.cur[26], 0.866667);
        hubo.joints["RHR"].child.color.setRGB(0.866667 + 100 * state.cur[27] * state.cur[27], 0.866667 + 50 * state.cur[27] * state.cur[27], 0.866667);
        hubo.joints["RHP"].child.color.setRGB(0.866667 + 100 * state.cur[28] * state.cur[28], 0.866667 + 50 * state.cur[28] * state.cur[28], 0.866667);
        hubo.joints["RKN"].child.color.setRGB(0.866667 + 100 * state.cur[29] * state.cur[29], 0.866667 + 50 * state.cur[29] * state.cur[29], 0.866667);
        hubo.joints["RAP"].child.color.setRGB(0.866667 + 100 * state.cur[30] * state.cur[30], 0.866667 + 50 * state.cur[30] * state.cur[30], 0.866667);
        hubo.joints["RAR"].child.color.setRGB(0.866667 + 100 * state.cur[31] * state.cur[31], 0.866667 + 50 * state.cur[31] * state.cur[31], 0.866667);
      }
      hubo.canvas.render();
      LIVE.stats.end();
      return LIVE.stats.begin();
    };
    LIVE.connectionEstablished.done(function() {
      if (LIVE.use_socket) {
        return LIVE.socket.on('serial_state', function(serial_state) {
          LIVE.serial_state = serial_state;
          LIVE.flashLED();
          return updateModel(serial_state);
        });
      }
    });
    $('input[name="angle-source"]:radio').on('change', function() {
      console.log('Radio Changed');
      return updateModel(LIVE.serial_state);
    });
    $('input[name="current-source"]:radio').on('change', function() {
      var link, _i, _len, _ref, _results;
      _ref = hubo.links.asArray();
      _results = [];
      for (_i = 0, _len = _ref.length; _i < _len; _i++) {
        link = _ref[_i];
        _results.push(link.unhighlight());
      }
      return _results;
    });
    $('#fullscreen-button').on('click', function() {
      if (document.webkitFullscreenEnabled) {
        return document.getElementById('hubo_container').webkitRequestFullscreen();
      }
    });
    $(document).on('webkitfullscreenchange', function() {
      return setTimeout(adaptCanvasSize(c), 500);
    });
    return c.render();
  }, progress = function(step, total, node) {
    return $("#load").html("Loading " + step + "/" + total);
  });
  return LIVE.hubo = hubo;
});
