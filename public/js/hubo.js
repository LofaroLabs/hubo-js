// Generated by CoffeeScript undefined
var Hubo,
  __hasProp = {}.hasOwnProperty,
  __extends = function(child, parent) { for (var key in parent) { if (__hasProp.call(parent, key)) child[key] = parent[key]; } function ctor() { this.constructor = child; } ctor.prototype = parent.prototype; child.prototype = new ctor(); child.__super__ = parent.prototype; return child; };

Hubo = (function(_super) {
  var _robot;

  __extends(Hubo, _super);

  _robot = Hubo;

  function Hubo(name, ready_callback) {
    var load_callback,
      _this = this;
    this.name = name;
    Hubo.__super__.constructor.call(this);
    _robot = this;
    this.motors = new Dict();
    this.loadURDF("hubo-urdf/model.urdf", load_callback = function() {
      var key, value, _ref;
      _ref = _this.joints;
      for (key in _ref) {
        if (!__hasProp.call(_ref, key)) continue;
        value = _ref[key];
        if (key.length === 3) {
          _this.motors[key] = {};
          _this.motors[key].name = key;
          _this.motors[key].lower_limit = _this.joints[key].lower_limit;
          _this.motors[key].upper_limit = _this.joints[key].upper_limit;
          Object.defineProperties(_this.motors[key], {
            value: {
              get: function() {
                return this._value;
              },
              set: function(val) {
                this._value = val;
                _robot.joints[this.name].value = val;
              }
            }
          });
          _this.motors[key].value = 0;
        }
      }
      _this.addFinger('LF1');
      _this.addFinger('LF2');
      _this.addFinger('LF3');
      _this.addFinger('LF4');
      _this.addFinger('LF5');
      _this.addFinger('RF1');
      _this.addFinger('RF2');
      _this.addFinger('RF3');
      _this.addFinger('RF4');
      _this.addFinger('RF5');
      return ready_callback();
    });
  }

  Hubo.prototype.addFinger = function(name) {
    var finger, fingers, hand, motor;
    _robot = this;
    motor = {};
    motor.name = name;
    motor.lower_limit = 0;
    motor.upper_limit = 1.4;
    hand = name[0] === 'L' ? 'left' : 'right';
    fingers = ['Thumb', 'Index', 'Middle', 'Ring', 'Pinky'];
    finger = fingers[name[2] - 1];
    motor.full_name = hand + finger;
    Object.defineProperties(motor, {
      value: {
        get: function() {
          return this._value;
        },
        set: function(val) {
          if (val < this.lower_limit) {
            val = this.lower_limit;
          } else if (val > this.upper_limit) {
            val = this.upper_limit;
          }
          this._value = val;
          _robot.joints[this.full_name + 'Knuckle1'].value = val;
          _robot.joints[this.full_name + 'Knuckle2'].value = val;
          _robot.joints[this.full_name + 'Knuckle3'].value = val;
        }
      }
    });
    motor.value = 0.9;
    return this.motors[name] = motor;
  };

  return Hubo;

})(WebGLRobots.Robot);
